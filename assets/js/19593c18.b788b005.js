"use strict";(self.webpackChunk_inversifyjs_inversify_validation_docs_site=self.webpackChunk_inversifyjs_inversify_validation_docs_site||[]).push([["699"],{3862:function(e,a,n){n.r(a),n.d(a,{frontMatter:()=>d,toc:()=>c,default:()=>m,metadata:()=>r,assets:()=>l,contentTitle:()=>o});var r=JSON.parse('{"id":"standard-schema/api","title":"API","description":"StandardSchemaValidationPipe","source":"@site/docs/standard-schema/api.mdx","sourceDirName":"standard-schema","slug":"/standard-schema/api","permalink":"/validation/docs/standard-schema/api","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"API"},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/validation/docs/standard-schema/introduction"},"next":{"title":"Introduction","permalink":"/validation/docs/ajv/introduction"}}'),t=n(9970),i=n(7245),s=n(445);let d={sidebar_position:2,title:"API"},o,l={},c=[{value:"StandardSchemaValidationPipe",id:"standardschemavalidationpipe",level:2},{value:"Example: register a StandardSchemaValidationPipe globally",id:"example-register-a-standardschemavalidationpipe-globally",level:3},{value:"ValidateStandardSchemaV1",id:"validatestandardschemav1",level:2}];function h(e){let a={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h2,{id:"standardschemavalidationpipe",children:"StandardSchemaValidationPipe"}),"\n",(0,t.jsx)(a.p,{children:"Validates values using any schema that implements the Standard Schema v1 spec. Register it globally to validate incoming HTTP parameters (e.g., body) in your controllers."}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-ts",children:"constructor(schemaList?: StandardSchemaV1[])\n"})}),"\n",(0,t.jsx)(a.p,{children:"Parameters"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:["schemaList (optional StandardSchemaV1[]): One or more Standard Schema schemas applied globally to every validated value. These run before any parameter-level schemas added via ",(0,t.jsx)(a.code,{children:"@ValidateStandardSchemaV1"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.code,{children:"StandardSchemaValidationPipe"})," can be registered as a global pipe: ",(0,t.jsx)(a.code,{children:"adapter.useGlobalPipe(new StandardSchemaValidationPipe())"}),".\nThis way, controller parameters decorated ",(0,t.jsx)(a.code,{children:"@ValidateStandardSchemaV1"})," are automatically validated."]}),"\n",(0,t.jsx)(a.h3,{id:"example-register-a-standardschemavalidationpipe-globally",children:"Example: register a StandardSchemaValidationPipe globally"}),"\n",(0,t.jsx)(s.A,{language:"ts",children:"import { InversifyExpressHttpAdapter } from '@inversifyjs/http-express';\nimport { InversifyValidationErrorFilter } from '@inversifyjs/http-validation';\nimport { StandardSchemaValidationPipe } from '@inversifyjs/standard-schema-validation';\nimport { Container } from 'inversify';\n\nconst container: Container = new Container();\n\nconst adapter: InversifyExpressHttpAdapter = new InversifyExpressHttpAdapter(\n  container,\n  { logger: true },\n);\nadapter.useGlobalFilters(InversifyValidationErrorFilter);\nadapter.useGlobalPipe(new StandardSchemaValidationPipe());\n"}),"\n",(0,t.jsx)(a.h2,{id:"validatestandardschemav1",children:"ValidateStandardSchemaV1"}),"\n",(0,t.jsxs)(a.p,{children:["Attaches one or more Standard Schema v1 schemas to a specific parameter (e.g., ",(0,t.jsx)(a.code,{children:"@Body()"}),"), so the ",(0,t.jsx)(a.code,{children:"StandardSchemaValidationPipe"})," can validate and (optionally) transform the value before your controller method runs."]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-ts",children:"ValidateStandardSchemaV1(...schemaList: StandardSchemaV1[]): ParameterDecorator\n"})}),"\n",(0,t.jsx)(a.p,{children:"Parameters"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"schemaList: One or more schemas from any library that implements the Standard Schema v1 spec (e.g., Zod, Valibot, Arktype)."}),"\n"]}),"\n",(0,t.jsxs)(a.p,{children:["When multiple schemas are provided, they run in order. The output of one becomes the input of the next. Any schemas provided to ",(0,t.jsx)(a.code,{children:"StandardSchemaValidationPipe"})," run first; parameter-level schemas run afterwards. If a schema transforms the value (e.g., parsing/coercion), the controller receives the transformed value."]}),"\n",(0,t.jsxs)(a.p,{children:["On failure, an ",(0,t.jsx)(a.code,{children:"InversifyValidationError"})," is thrown and can be converted to a Bad Request HTTP response by ",(0,t.jsx)(a.code,{children:"ValidationErrorFilter"}),"."]}),"\n",(0,t.jsx)(a.p,{children:"Example: validate request body with Zod"}),"\n",(0,t.jsx)(s.A,{language:"ts",children:"import { Body, Controller, Post } from '@inversifyjs/http-core';\nimport { ValidateStandardSchemaV1 } from '@inversifyjs/standard-schema-validation';\nimport zod from 'zod';\n\ninterface Message {\n  content: string;\n}\n\n@Controller('/messages')\nexport class MessageController {\n  @Post()\n  public async createMessage(\n    @Body()\n    @ValidateStandardSchemaV1(\n      zod.object({ content: zod.string().max(100) }).strict(),\n    )\n    message: Message,\n  ): Promise<Message> {\n    return message;\n  }\n}\n"})]})}function m(e={}){let{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);